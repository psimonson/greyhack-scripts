import_code("/home/5n4k3/source/gethacks.src")
import_code("/home/5n4k3/source/getlib.src")

if params.len < 1 or params.len > 2 then exit("Usage: " + program_path.split("/")[-1] + " [ip] [(opt) ip]")
if not is_valid_ip(params[0]) then exit("Error: Invalid IP address given for first parameter.")
if params.len == 2 and not is_valid_ip(params[1]) then exit("Error: Invalid IP address given for second parameter.")

result = get_remote_hacks(params[0])
if result.len == 0 then exit()

computer = null
lib = result["dump"]
hacks = result["hacks"]
for hack in hacks
	for value in hack["values"]
		result = null
		if params.len == 2 then
			result = lib.overflow(hack["memory"], value, params[1])
		else
			result = lib.overflow(hack["memory"], value)
		end if
		if not result then continue
		
		if not computer and typeof(result) == "computer" then
			computer = result
			break
		end if
	end for
	if computer != null then break
end for

router = null
if params.len == 1 then
	router = get_router
else
	router = get_router(params[0])
end if
if router == null then exit("Error: Could not get router.")

ports = null
if params.len == 1 then
	ports = router.used_ports
else
	ports = router.device_ports(params[1])
end if
if not ports then exit("Scan finished. No open ports.")
if typeof(ports) == "string" then exit(ports)

info = "<color=#00FF00>PORT</color> <color=#00FF00>STATUS</color> LIBRARY VERSION <color=#00FF00>ADDRESS</color>"
for port in ports
	color = "<color=#FFFF00>"
	color2 = "<color=#00FF00>"
	color_end = "</color>"
	status = "OPENED"
	if port.is_closed then
		color = "<color=#FF0000>"
		status = "CLOSED"
	end if
	info = info + "\n" + color2 + port.port_number + color_end + " " + color + status + color_end + " " + router.port_info(port) + " " + color2 + port.get_lan_ip + color_end
end for

address = params[0]
if params.len == 2 then
	address = params[1]
end if

print("Scanning for interesting ports on <color=#FFFF00>" + address + "</color>...\n")
print(format_columns(info))

