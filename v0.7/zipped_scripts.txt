@@@@@/home/5n4k3/src/decrypt.src
//command: decrypt
import_code("/home/5n4k3/src/helper.src")
crypto = get_library("crypto.so", true)
if not crypto then exit

GetPassword = function(userPass)
	if userPass.len != 2 then exit(get_name() + ": wrong syntax")
	password = crypto.decipher(userPass[1])
	return password
end function

if params.len != 1 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [hash|file]</b>")

origFile = params[0]
file = get_shell.host_computer.File(origFile)
lines = []

if file then
	if file.is_binary then exit(get_name() + ": can't read " + origFile + ". Binary file")
	if not file.has_permission("r") then exit(get_name() + ": can't read file. Permission denied")
	if file.get_content.len == 0 then exit(get_name() + ": no users found")
	lines = file.get_content.split("\n")
else if origFile.len > 33 then
	lines = [origFile]
else
	exit(get_name() + ": can't find " + origFile)
end if

password = null
if lines.len == 1 then
	print("Single user found.")
	userPass = lines[0].split(":")
	password = GetPassword(userPass)
	if not password then exit("Can't find password :(")
	print("Username: " + userPass[0] + "\nPassword: " + password + "\n")
else
	print("Multiple users found.")
	for line in lines
		userPass = line.split(":")
		password = GetPassword(userPass)
		if not password then
			print("<color=#BB0000>Can't find password :(</color>\n")
		else
			print("<color=#AA8855><b>Password</b> found</color> => " + userPass[0] + " : " + password + "\n")
		end if
	end for
end if

@@@@@@@@@@
@@@@@/home/5n4k3/src/wifihack.src
// wifihack - Almost fully automate wifi hacking.
import_code("/home/5n4k3/src/helper.src")
usage = "<b>Usage: " + program_path.split("/")[-1] + "</b>"
if params.len != 0 then exit(usage)

crypto = get_library("crypto.so", true)
if not crypto then exit

// Get computer and delete file.cap if exists
computer = get_shell.host_computer
file = computer.File(current_path + "/file.cap")
if file then
	file.delete
end if

// Get interfaces
network_info = computer.network_devices.split(" ")
interfaces = []
interfaces_num = 0
for info in network_info
	if info == "wlan" + str(interfaces_num) then
		interfaces.push(info)
		interfaces_num = interfaces_num + 1
	end if
end for

// Selection menu for wifi interfaces
interface = 0
while interface <= 0 or interface > interfaces.len
	num = 1
	print("Interfaces:")
	for net in interfaces
		print(str(num) + ". " + net)
		num = num + 1
	end for
	print("0. Exit")
	interface = user_input("Selection: ")
	interface = interface.val
	if interface == 0 then exit("Program ended")
end while
interface = interface - 1
if interface < 0 or interface > interfaces.len-1 then exit("Error: Can't find interface, got " + str(interface.val))

// Found interface
print("Interface: " + interfaces[interface])

result = crypto.airmon("start", interfaces[interface])
if result == 0 then exit("Failed to start monitoring...")

// Get network list
get_netlist = function()
	print("Getting wifi network list...")
	info = "BSSID POWER ESSID"
	networks = computer.wifi_networks(interfaces[interface])
	for net in networks
		info = info + "\n" + net
	end for
	print(format_columns(info))
	return networks
end function

// Get user selection
essid = null
bssid = null
networks = []
selection = 0
while selection <= 0 or selection > networks.len
	num = 1
	networks = get_netlist()
	print("Please select a network:")
	for net in networks
		print(str(num) + ". " + net.split(" ")[-1])
		num = num + 1
	end for
	print("0. Exit")
	selection = user_input("Selection: ")
	selection = selection.val
	if selection == 0 then
		print("You decided to exit...")
		crypto.airmon("stop", interfaces[interface])
		if result == 1 then
			print("Monitoring, stopped running...")
		end if
		exit("Program ended")
	end if
end while
selection = selection - 1
if selection < 0 or selection > networks.len-1 then exit("Error: Selection out of range.")

// Now run aireplay to get capture data
packet_count = null
while not packet_count or packet_count <= 0 and packet_count >= 300000
	packet_count = user_input("How many ACKs do you need? ")
	packet_count = packet_count.val
end while
bssid = networks[selection].split(" ")[-3]
essid = networks[selection].split(" ")[-1]
result = crypto.aireplay(bssid, essid, packet_count)
if result == 0 then
	print("Failed to get capture data from wifi network.")
	result = crypto.airmon("stop", interfaces[interface])
	if result == 0 then
		print("Failed to stop monitoring...")
	end if
	exit("Program ended")
end if

// Launch the WEP cracker program called "aircrack"
result = crypto.aircrack(home_dir + "/file.cap")
if not result then
	print("Failed to crack password.")
	result = crypto.airmon("stop", interfaces[interface])
	if result == 0 then
		print("Failed to stop monitoring...")
	end if
	exit("Program ended")
end if
password = result

// Stop monitoring interface
result = crypto.airmon("stop", interfaces[interface])
if result == 0 then
	print("Monitoring failed to stop, already stopped.")
end if

// Save password to file and connect.
print("Wifi network cracked saving password...")
filename = essid + ".txt"
result = computer.touch(home_dir, filename)
if not result then
	print("Cannot create file: " + filename)
	exit("Program ended")
end if
result = computer.File(filename)
if result != null then
	result.set_content("")
	result.set_content("Network" + char(10) + "============" + char(10) + "ESSID: " + essid + char(10) + "BSSID: " + bssid + char(10) + "Password: " + password + char(10))
end if
print("Network: " + essid + "\nPassword: " + password)

@@@@@@@@@@
@@@@@/home/5n4k3/src/viruswipe.src
//Simple virus..
computer = get_shell.host_computer
if not computer then exit("Error: Can't get host computer.")

if active_user == "root" then
	folder = computer.File("/boot")
	for file in folder.get_files
		print("Deleting file: " + file.name)
		file.delete
	end for
	
	folder = computer.File("/etc")
	for file in folder.get_files
		print("Deleteing file: " + file.name)
		file.delete
	end for
	
	folder = computer.File("/home")
	print("Clearing " + folder.name + "...")
	for folder in folder.get_folders
		print("Deleting folder: " + folder.name)
		folder.delete
	end for
	
	file = computer.File("/var/system.log")
	if file then
		print("Removing system log: " + file.path)
		file.delete
	else
		print("Cannot remove system log doesn't exist.")
	end if

	file = computer.File(program_path)
	if not file then exit("Can't find virus file (this file).")
	print("Removing virus evidence: " + file.name)
	file.delete
end if

@@@@@@@@@@
@@@@@/home/5n4k3/src/zip.src
// zip.src - make backup of all scripts.
comp = get_shell.host_computer
sdir = comp.File(home_dir + "/src")
file = comp.File(home_dir + "/scripts.txt")

if not file then
	comp.touch(home_dir, "scripts.txt")
	file = comp.File(home_dir + "/scripts.txt")
end if
if not file then exit("Error: Can't create scripts.txt in " + home_dir)

data = ""
for tmp in sdir.get_files
	if not tmp.is_binary or not tmp.is_folder then
		data = data + "@"*5 + tmp.path + char(10) + tmp.get_content + char(10) + "@"*10 + char(10)
	end if
end for
file.set_content(data)

@@@@@@@@@@
@@@@@/home/5n4k3/src/helper.src
// helper.src - Some miscellaneous functions.

// Function to get program name
get_name = function()
	return program_path.split("/")[-1]
end function

// Function to get current working directory
get_path = function()
	return parent_path(program_path)
end function

// Function to print an error message
print_error = function(text)
	if typeof(text) != "string" then exit("<color=#AA0000>print_error: Variable given wasn't a string.</color>")
	return print("<color=#AA0000>" + get_name() + ": " + text + "</color>")
end function

// Function search the home directory
search_home = function(result, user_file)
	home_folder = null
	if typeof(result) == "file" then
		while not result.path == "/"
			result = result.parent
		end while
		
		// Get user home directory
		for folder in result.get_folders
			if folder.name == "home" and folder.is_folder then
				home_folder = folder
				break
			end if
		end for
	else if typeof(result) == "computer" then
		home_folder = result.File("/home")
	else if typeof(result) == "shell" then
		home_folder = result.host_computer.File("/home")
	end if
	if not home_folder then return print("Error: Can't access home dir.")
	
	bank_info = []
	print("Accessing to " + user_file + " files...")
	folders = home_folder.get_folders
	for folder in folders
		file_found = false

		print("User: " + folder.name + " found...")
		for sub_folder in folder.get_folders
			if sub_folder.name == "Config" and sub_folder.is_folder then
				files = sub_folder.get_files
				for file in files
					if file.name == user_file then
						if not file.has_permission("r") then print("failed. Can't access file contents. Permission denied")
						print("success! Storing...")
						bank_info.push(file)
						file_found = true
					end if
				end for
			end if
		end for
		if not file_found then print("File not found.")
	end for
	if folders.len == 0 or bank_info.len == 0 then
		print("No users found. Program aborted")
		return
	end if
	
	// Print results
	print("Printing all saved info...\n========================")
	for bank in bank_info
		print(bank.get_content)
	end for
end function

use_exploit = function(mx = null, address = null, port = null, local = false)
	if not mx then
		print_error("Please call get_library first.")
		return null
	end if

	ns = null
	lib = null
	
	if not local then
		ns = null
		if not port then
			ns = mx.net_use(address)
		else
			ns = mx.net_use(address, port)
		end if
		if not ns then return print_error("Can't connect to net session.")
		lib = ns.dump_lib
	else
		lib = mx.load(address)
	end if
	
	if not lib then
		print_error("Can't get library, not found.")
		return null
	end if
	return lib
end function

get_library = function(library, search)
	lib_dirs = ["/lib", get_path()]
	if search then
		lib = null
		for lib_dir in lib_dirs
			lib = include_lib(lib_dir + "/" + library)
			if lib then break
		end for
		if not lib then
			print_error("Can't find " + library + " anywhere.")
			return null
		end if
		return lib
	else
		return include_lib(library)
	end if
end function

// Function to check for access type
get_accesstype = function(result)
	if not result then return null
	if typeof(result) == "shell" then
		file = result.host_computer.File("/etc/passwd")
		if not file then return "unknown"
		if file.has_permission("r") then
			otherfile = result.host_computer.File("/root")
			if not otherfile then return "unknown"
			if otherfile.has_permission("rwx") then
				return "root"
			else
				return "user"
			end if
		else
			return "guest"
		end if
	else if typeof(result) == "computer" then
		file = result.File("/etc/passwd")
		if not file then return "unknown"
		if file.has_permission("r") then
			otherfile = result.File("/root")
			if not otherfile then return "unknown"
			if otherfile.has_permission("rwx") then
				return "root"
			else
				return "user"
			end if
		else
			return "guest"
		end if
	else if typeof(result) == "file" then
		file = result
		while file.path != "/"
			file = file.parent
		end while
		
		passwd = null
		for folder in file.get_folders
			if folder.name == "etc" then
				for file in folder.get_files
					if file.name == "passwd" then
						if passwd and file.has_permission("r") then
							passwd = file
							break
						end if
					end if
				end for
			end if
		end for
		
		rootdir = null
		for folder in file.get_folders
			if folder.name == "root" then
				if rootdir and folder.has_permission("r") then
					rootdir = folder
					break
				end if
			end if
		end for
		
		// Check for user of file.
		if passwd and passwd.has_permission("r") then
			if rootdir then
				if rootdir.has_permission("rwx") then
					return "root"
				else
					return "user"
				end if
			end if
		else
			return "guest"
		end if
	end if
	return "unknown"
end function

// Function scan for all exploits on remote system
get_exploits = function(lib, use_types = false, extra = null)
	// Build a map of all exploits
	mem_map = []
	print("Scanning for exploits: [<color=#00DD00>" + lib.lib_name + ":" + lib.version + "</color>]\n")
	memory = mx.scan(lib)
	for mem in memory
		map = {}
		list = []
		data = mx.scan_address(lib, mem).split("Unsafe check: ")
		for line in data
			if line == data[0] then continue
			
			value = line[line.indexOf("<b>")+3:line.indexOf("</b>")]
			value = value.replace("\n", "")
			
			if use_types then
				type = null
				if extra then
					type = lib.overflow(mem, value, extra)
				else
					type = lib.overflow(mem, value)
				end if
				if not type then continue
				
				value_map = {}
				value_map["value"] = value
				value_map["type"] = typeof(type)
				value_map["result"] = type
				value_map["access"] = get_accesstype(type)
				list.push(value_map)
			else
				list.push(value)
			end if
		end for
		map["address"] = mem
		map["values"] = list
		mem_map.push(map)
	end for
	if not mem_map then return null
	return mem_map
end function

@@@@@@@@@@
@@@@@/home/5n4k3/src/routernuke.src
// routernuke.src - Get root access if possible.
import_code("/home/5n4k3/src/helper.src")

if params.len < 1 or params.len > 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [address] (lan_address)</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": Not a valid IP address.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit
shell = null
root_hash = null

// Main code below.
memory = mx.scan(lib)
for mem in memory
	data = mx.scan_address(lib, mem).split("Unsafe check: ")
	for line in data
		if line == data[0] then continue
		
		// Get value from memory address
		value = line[line.indexOf("<b>")+3:line.indexOf("</b>")]
		value = value.replace("\n", "")
		result = lib.overflow(mem, value, params[1])
		if not result then continue
		
		// Process exploit
		if typeof(result) == "computer" then
			//result.host_computer.change_password("root", "dick")
			file = result.File("/etc/passwd")
			if not file then continue
			if not file.has_permission("r") then exit(get_name() + ": Permission denied.")
			if file.is_binary then exit(get_name() + ": File was a binary.")
				
			cont = file.get_content.split("\n")[0]
			if not cont then exit(get_name() + "Can't get file content.")
			root_hash = cont.split(":")
			if root_hash.len != 2 then root_hash = null
		else if not shell and typeof(result) == "shell" then
			shell = result
		else
			print("Computer needed but, got " + typeof(result))
		end if
	end for
end for

if root_hash then
	root_shell = shell.host_computer.get_shell(root_hash[0], root_hash[1])
	if not root_shell then exit(get_name() + ": Can't get root shell.")
	root_shell.start_terminal
else
	shell.start_terminal
end if

@@@@@@@@@@
@@@@@/home/5n4k3/src/routerbank.src
// routerbank.src - Hack router remotely to retrieve all bank info computers.
import_code("/home/5n4k3/src/helper.src")

if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [public ip] [local ip]</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": One or more IP address(es) is/are invalid.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit

exploits = get_exploits(lib, true, params[1])
if not exploits then exit(get_name() + ": Can't find vulnerabilities.")

// Will show a log after this runs
for exploit in exploits
	address = exploit["address"]
	print("<color=#00CC00>Address >=====[</color><b>" + address + "</b><color=#00CC00>]=====<</color>")
	for value in exploit["values"]
		if value["result"] == null then continue
		
		print("<color=#CC0000>Value >=====[</color><b>" + value["value"] + ":" + value["access"] + "@" + value["type"] + "</b><color=#CC0000>]=====<</color>")
		
		if value["type"] == "computer" or value["type"] == "file" or value["type"] == "shell" then
			search_home(value["result"], "Bank.txt")
			exit("Program ended")
		end if
	end for
end for

@@@@@@@@@@
@@@@@/home/5n4k3/src/routervirus.src
// routervirus.src - Hack router remotely to make system not boot.
import_code("/home/5n4k3/src/helper.src")

if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [public ip] [local ip]</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": One or more IP address(es) is/are invalid.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit

exploits = get_exploits(lib, params[0])
if not exploits then exit(get_name() + ": Can't find vulnerabilities.")

// Will show a log after this runs
for exploit in exploits
	address = exploit["address"]
	print("<color=#00CC00>Address >=====[</color><b>" + address + "</b><color=#00CC00>]=====<</color>")
	for value in exploit["values"]
		print("<color=#CC0000>Value >=====[</color><b>" + value + "</b><color=#CC0000>]=====<</color>")
		if params.len == 2 and is_valid_ip(params[1]) then
			result = lib.overflow(address, value, params[1])
		else
			result = lib.overflow(address, value)
		end if
		if not result then continue
		if typeof(result) == "computer" or typeof(result) == "file" then
			get_file(result, "home", "Bank.txt")
			if typeof(result) == "computer" then
				print("==========\n" + result.get_ports + "\n===========")
				bootdir = result.File("/boot")
				if not bootdir then exit(get_name() + ": Can't get boot directory.")
				if not bootdir.has_permission("rw") then exit(get_name() + ": Permission denied.")
				for file in bootdir.get_files
					print("Deleting file: " + file.path)
					file.delete
				end for
				print("Done!")
			end if
		end if
	end for
end for

@@@@@@@@@@
@@@@@/home/5n4k3/src/routermail.src
// routermail.src - Hack router remotely to retrieve all mail info computers.
import_code("/home/5n4k3/src/helper.src")

if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [public ip] [local ip]</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": One or more IP address(es) is/are invalid.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit

exploits = get_exploits(lib, true, params[1])
if not exploits then exit(get_name() + ": Can't find vulnerabilities.")

// Will show a log after this runs
for exploit in exploits
	address = exploit["address"]
	print("<color=#00CC00>Address >=====[</color><b>" + address + "</b><color=#00CC00>]=====<</color>")
	for value in exploit["values"]
		if value["result"] == null then continue
		
		print("<color=#CC0000>Value >=====[</color><b>" + value["value"] + ":" + value["access"] + "@" + value["type"] + "</b><color=#CC0000>]=====<</color>")
		
		if (value["type"] == "computer" or value["type"] == "file") then
			search_home(value["result"], "Mail.txt")
			exit("Program ended")
		end if
	end for
end for

@@@@@@@@@@
@@@@@/home/5n4k3/src/types.src
// types.src - Hack router remotely to retrieve all types of overflows.
import_code("/home/5n4k3/src/helper.src")

if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [public ip] [local ip]</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": One or more IP address(es) is/are invalid.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit

exploits = get_exploits(lib, params[1], null, true)
if not exploits then exit(get_name() + ": Can't find vulnerabilities.")

// Will show a log after this runs
for exploit in exploits
	address = exploit["address"]
	print("<color=#00CC00>Address >=====[</color><b>" + address + "</b><color=#00CC00>]=====<</color>")
	for value in exploit["values"]
		print("<color=#CC0000>Value >=====[</color><b>" + value["value"] + " : " + value["access"] + "@" + value["type"] + "</b><color=#CC0000>]=====<</color>")
	end for
end for

@@@@@@@@@@
@@@@@/home/5n4k3/src/probe.src
// probe.src - Deep probe for a network.
import_code("/home/5n4k3/src/helper.src")

if params.len != 1 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [address]</b>")
if not is_valid_ip(params[0]) then exit(get_name() + ": Invalid IP address.")
if not get_shell.host_computer.is_network_active then exit(get_name() + ": No internet access.")

address = params[0]
islanip = is_lan_ip(address)
	
if islanip then
	router = get_router
else
	router = get_router(address)
end if

if router == null then exit(get_name() + ": IP address not found.")
ports = null

if not islanip then
	ports = router.used_ports
else
	ports = router.device_ports(address)
end if

if ports == null or ports.len == 0 then exit(get_name() + ": No ports open.")
if typeof(ports) == "string" then exit(get_name() + ": " + ports)

get_netmap = function(ports = null)
	if not ports or ports.len == 0 then return print("No ports open\n")
	if typeof(ports) == "string" then return print(ports + "\n")

	for port in ports
		service = router.port_info(port)
		lan_ip = port.get_lan_ip
		status = "open"
	
		if port.is_closed and is_lan_ip(lan_ip) then
			status = "closed"
		end if
		
		info = info + "\n" + port.port_number + " " + status + " " + service + " " + lan_ip
	end for
	print(format_columns(info) + "\n")
end function

info = "PORT STATE SERVICE VERSION LAN"
print("\nStarting " + get_name() + " v1.0 at " + current_date)
print("Interesting ports on " + address + "\n")

if ports.len == 0 then exit(get_name() + ": Scan finished. No open ports.")

print("[<color=#AABB00><b>TARGET</b></color>] - [<color=#AABB00><b>" + address + "</b></color>]\n" + "-" * (address.len + 9))
get_netmap(ports)
for ip in router.devices_lan_ip
	ports = []
	type = "ROUTER"
	if router.local_ip != ip then
		new_router = get_router(ip)
		if new_router then
			new_ports = new_router.device_ports(ip)
			if new_ports and typeof(new_ports) == "list" then
				ports = ports + new_ports
			end if
		end if
		new_switch = get_switch(ip)
		if new_switch then
			type = "SWITCH"
		end if
		if not new_router and not new_switch then
			type = "DEVICE"
			new_ports = router.device_ports(ip)
			if new_ports and typeof(new_ports) == "list" then
				ports = ports + new_ports
			end if
		end if
		print("[<color=#AABB00><b>" + type + "</b></color>] - [<color=#AABB00><b>" + ip + "</b></color>]\n" + "-" * (ip.len + 9))
		get_netmap(ports)
	end if
end for
exit("Program ended")

@@@@@@@@@@
@@@@@/home/5n4k3/src/shellhelp.src
// shellhelp.src - Some functions for when you obtain a shell.

cleanup = function(shell = null, filenames = null)
	if not shell then return print_error("Can't clean up files.")
	if not filenames or typeof(filenames) != "list" then return print_error("No filenames or not a list.")

	// Save original log file.
	file = get_shell.host_computer.File("/var/system.log")
	if file != null then
		file.copy("/home/guest", "system.log")
	end if
	
	// Delete all files in filenames array.
	for filename in filenames
		file = shell.host_computer.File("/home/guest/" + filename)
		if not file then continue
		print("Deleting file: " + file.path)
		file.delete
	end for
	
	// Replace log file.
	file = get_shell.host_computer.File("/home/guest/system.log")
	if file != null then
		file.move("/var", "system.log")
	end if
end function

// Function to replicate itself into routers and computers
replicate = function(remote_shell = null, filenames = null)
	if not remote_shell then return print_error("No remote shell.")
	if not filenames or typeof(filenames) != "list" then return print_error("No filenames or not a list.")
	if typeof(remote_shell) != "shell" then return print_error("Shell argument not correct.")

	for filename in filenames
		get_shell.scp(parent_path(program_path) + "/" + filename, "/home/guest", remote_shell)
		file = remote_shell.host_computer.File("/home/guest/" + filename)
		if not file then
			print("Can't find file: /home/guest/" + filename)
			continue
		end if
		print("Setting owner and group for " + file.path + ".")
		file.set_owner("guest", 0)
		file.set_group("guest", 0)
		file.chmod("u+rwx,g+rwx,o+rwx", 0)
	end for
end function

// Function to quit and cleanup shell
quit = function(shell = null, message = null)
	if not shell or not message then return print_error("No shell or message given.")
	print_error(message)
	// TODO: Cleanup before exit
	exit("Program ended")
end function

// Function to get root password.
get_passfile = function(file = null)
	if not file then exit(get_name() + ": File is null.")
	if file and typeof(file) != "file" then exit(get_name() + ": Not a file.")
	if not file.has_permission("r") then exit(get_name() + ": Permission denied.")
	if file.is_binary then exit(get_name() + ": File was a binary.")
	
	cont = file.get_content.split("\n")
	if not cont then exit(get_name() + ": Can't get content.")
	return cont
end function

// Function to exploit.
do_exploit = function(address = null, port = null)
	if not address then exit(get_name() + ": No address given.")
	
	shell = null
	exploits = null
	
	if not port then
		exploits = exploit_router(address)
	else
		exploits = exploit_server(address, port)
	end if
	if not exploits then exit(get_name() + ": Can't exploit system.")
		
	for exploit in exploits
		memory = exploit["address"]
		for value in exploit["values"]
			if not value then continue
			print(value["value"] + " -> " + value["access"] + "@" + value["type"])
			
			if not shell and value["type"] == "shell" then
				shell = value["result"]
				break
			end if
		end for
		if shell then break
	end for
	
	return shell
end function

// Function to get shell on remote machine.
do_shell = function(shell = null, brouter = false)
	if not shell or typeof(shell) != "shell" then exit(get_name() + ": Could not get shell.")
	if typeof(brouter) != "number" then exit(get_name() + ": Flag must be true or false.")
	
	print("<color=#AABB00><b>Starting to get shell on " + shell.host_computer.local_ip + "...</b></color>\n")
	crypto = get_library("crypto.so", true)
	if not crypto then
		print("Warning: Can't find crypto library.")
	else
		modules = []
		passwd = null
		
		if brouter then
			modules = ["init.so", "kernel_router.so", "net.so"]
		else
			modules = ["init.so", "kernel_module.so", "net.so"]
		end if
		
		mx = get_library("metaxploit.so", true)
		if not mx then exit(get_name() + ": Can't find metaxploit.")
			
		for module in modules
			lib = use_exploit(mx, "/lib/" + module, null, true)
			if not lib then continue
			exploits = get_exploits(lib, true)
			if not exploits then continue
			
			for exploit in exploits
				memory = exploit["address"]
				for value in exploit["values"]
					if not value then continue
					
					print(value["value"] + " -> " + value["access"] + "@" + value["type"])
					
					if not passwd and value["type"] == "shell" and value["access"] != "guest" then
						passwd = value["result"].host_computer.File("/etc/passwd")
						break
					end if
					
					if not passwd and value["type"] == "computer" and value["access"] != "guest" then
						passwd = value["result"].File("/etc/passwd")
						break
					end if
				
					if not passwd and value["type"] == "file" and value["access"] != "guest" then
						passwd = value["result"]
						while passwd.path != "/"
							passwd = passwd.parent
						end while
						
						for folder in passwd.get_folders
							if folder.name == "etc" then
								passwd = folder
								break
							end if
						end for
						
						for file in passwd.get_files
							if file.name == "passwd" then
								passwd = file
								break
							end if
						end for
						break
					end if
				end for
				if passwd then break
			end for
			if passwd then break
		end for
		if not passwd then quit(shell, "Can't get password file.")
		cont = get_passfile(passwd)
		user = cont[0].split(":")
		print("Deciphering password for user: " + user[0] + "\n")
		pass = crypto.decipher(user[1])
		rootshell = get_shell(user[0], pass)
		if not rootshell then exit(get_name() + ": Can't get root shell.")
		rootshell.start_terminal
	end if
end function

// Function to exploit router.
exploit_router = function(address = null, extra = null)
	if address and not is_valid_ip(address) then return print(get_name() + ": Address isn't a valid IP address.")

	mx = get_library("metaxploit.so", true)
	if not mx then return
	lib = use_exploit(mx, address)
	if not lib then return
	exploits = null
	if not extra then
		exploits = get_exploits(lib, true)
	else
		exploits = get_exploits(lib, true, extra)
	end if
	if not exploits then return print(get_name() + ": Can't get exploits.")
	return exploits
end function

// Function to exploit server.
exploit_server = function(address = null, port = null, extra = null)
	if address and not is_valid_ip(address) then return print(get_name() + ": Address isn't a valid IP address.")
	if not port then return print(get_name() + ": Please provide a port.")
	if port and typeof(port) != "number" then return print(get_name() + ": Port isn't a number.")

	mx = get_library("metaxploit.so", true)
	if not mx then return
	lib = use_exploit(mx, address, port)
	if not lib then return
	exploits = null
	if not extra then
		exploits = get_exploits(lib, true)
	else
		exploits = get_exploits(lib, true, extra)
	end if
	if not exploits then return print(get_name() + ": Can't get exploits.")
	return exploits
end function

@@@@@@@@@@
@@@@@/home/5n4k3/src/mrrobot.src
// mrrobot.src - Source for the Mr. Robot TV show 0day exploit.
import_code("/home/5n4k3/src/helper.src")
import_code("/home/5n4k3/src/shellhelp.src")

// Main program starts here.
if params.len < 2 or params.len % 2 != 0 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [address] [port]</b>")
if params.len % 2 == 0 and not is_valid_ip(params[0]) then exit(get_name() + ": Invalid IP given.")
if params.len % 2 == 0 and params[1].to_int < 0 or params[1].to_int > 65535 then exit(get_name() + ": Invalid port.")

i = 2
new_params = []
while i < params.len
	new_params.push(params[i] + " " + params[i+1])
	i = i + 2
end while

if params[1].to_int == 0 then
	print("<color=#AABB00><b>Running router exploit on " + params[0] + "...</b></color>\n")
	shell = do_exploit(params[0])

	if new_params.len != 0 then
		filenames = ["metaxploit.so", "crypto.so", "mrrobot", "payload"]
		if not shell then exit(get_name() + ": Could not obtain shell.")
		replicate(shell, filenames)
		shell.launch("/home/guest/mrrobot", new_params.join(" "))
		cleanup(shell, filenames)
	else
		filenames = ["metaxploit.so", "crypto.so", "mrrobot", "payload"]
		if not shell then exit(get_name() + ": Could not obtain shell.")
		replicate(shell, filenames)
		shell.launch("/home/guest/payload", "-r")
	end if
else
	print("<color=#AABB00><b>[*] Running server exploit...</b></color>")
	shell = do_exploit(params[0], params[1].to_int)
	if not shell then exit(get_name() + ": Could not obtain shell.")
	print("<color=#AABB00><b>Got shell from " + shell.host_computer.local_ip + "!</b></color>")

	if new_params.len != 0 then
		// Replicate itself onto next machine.
		filenames = ["metaxploit.so", "crypto.so", "mrrobot", "payload"]
		replicate(shell, filenames)
		shell.launch("/home/guest/mrrobot", new_params.join(" "))
		cleanup(shell, filenames)
	else
		// Get new shell and exploit it.
		filenames = ["metaxploit.so", "crypto.so", "mrrobot", "payload"]
		replicate(shell, filenames)
		shell.launch("/home/guest/payload", "")
	end if
end if
exit("Program ended")

@@@@@@@@@@
@@@@@/home/5n4k3/src/payload.src
// payload.src - Local elivatation of priviledges.
import_code("/home/5n4k3/src/helper.src")
import_code("/home/5n4k3/src/shellhelp.src")
import_code("/home/5n4k3/src/utils.src")
import_code("/home/5n4k3/src/menu.src")

if params.len > 1 then exit("<b>Usage: " + get_name() + " [(opt) -i]</b>")

if params.len == 0 then
	do_shell(get_shell)
else if params.len == 1 and params[0] == "-r" then
	do_shell(get_shell, true)
else if params.len == 1 and params[0] == "-i" then
	filenames = ["metaxploit.so", "crypto.so", "mrrobot", "payload"]
	options = ["Probe", "Launch", "Cleanup"]
	done = false
	
	while not done
		option = make_menu(options)
		if option == 0 then
			done = true
		else if option == 1 then
			input = user_input("Enter IP address: ")
			if input != "" then
				if is_valid_ip(input) then
					print(make_color("yellow", "<b>Probing " + input + "...</b>"))
					probe(input)
				else
					print(make_color("yellow", "<b>Invalid IP address.</b>"))
				end if
			end if
		else if option == 2 then
			print(make_color("yellow", "<b>Enter list of IP and port combinations.</b>") + "\n" + make_color("yellow", "<b>Example: 192.168.1.1 0 192.168.1.2 22</b>") + "\n" + make_color("yellow", "<b>Example: 192.168.1.2 22</b>") + "\n" + make_color("yellow", "<b>" + "-" * 25 + "</b>") + "\n" + make_color("yellow", "Can put as many combinations as the game allows...\n"))
			input = null
			while not input or input == ""
				input = user_input("> ")
			end while
			get_shell.launch(get_path() + "/mrrobot", input)
			done = true
		else if option == 3 then
			input = user_input("Are you sure you want to clean up (y/n)? ")
			if input == "y" or input == "Y" then
				print(make_color("yellow", "<b>Cleaning up system...</b>"))
				cleanup(get_shell, filenames)
				done = true
			end if
		else
			print("Invalid option.")
		end if
	end while
else
	print("Invalid argument given to payload.")
end if
exit("Program ended")

@@@@@@@@@@
@@@@@/home/5n4k3/src/menu.src
// menu.src - Source for a option menu.

// Function to add color to a string.
make_color = function(color = "white", string = "")
	if not color then exit("No color provided.")
	if not string then exit("No string provided.")
	if typeof(color) != "string" then exit("Color can equal:\n  (red, green, blue, yellow, white, black)")
	if typeof(string) != "string" then exit("String needs to be entered.")
	
	if color == "red" then
		return "<color=#AA0000>" + string + "</color>"
	else if color == "green" then
		return "<color=#00AA00>" + string + "</color>"
	else if color == "blue" then
		return "<color=#0000AA>" + string + "</color>"
	else if color == "yellow" then
		return "<color=#AABB00>" + string + "</color>"
	else if color == "black" then
		return "<color=#000000>" + string + "</color>"
	else if color == "white" then
		return "<color=#FFFFFF>" + string + "</color>"
	else
		return "<color=#FFFFFF>" + string + "</color>"
	end if
end function

// Function to create a menu.
make_menu = function(options = null, color = "yellow", endstr = "Exit")
	if not options then exit("Please pass options list as first argument.")
	if not color then exit("Second argument is color string.")
	if not endstr then exit("Third argument is a menu exit string.")
	if typeof(options) != "list" then exit("First argument is of type 'list'.")
	if typeof(color) != "string" then exit("Second argument is of type 'string'.")
	if typeof(endstr) != "string" then exit("Third argument is of type 'string'.")
	
	option = null
	while not option or option < 0 or option > options.len
		for i in range(1, options.len)
			print(make_color(color, str(i) + ". " + options[i - 1]))
		end for
		print(make_color(color, "0. " + endstr))
		option = user_input(make_color(color, "Option: "))
		option = option.to_int
		if option == 0 then break
	end while
	return option
end function

@@@@@@@@@@
@@@@@/home/5n4k3/src/utils.src
// utils.src - Functions for useful utilities.

// Function for probing a target machine.
probe = function(address = null)
	if not address then return print("Can't probe, no argument given or it's null.")
	if not is_valid_ip(address) then return print("Can't probe IP address is invalid.")
	if not get_shell.host_computer.is_network_active then return print("Can't probe no active network connection.")
	
	router = null
	if is_lan_ip(address) then
		router = get_router
	else
		router = get_router(address)
	end if
	if not router then return print("Can't get router from address.")
	
	ports = null
	if not is_lan_ip(address) then
		ports = router.used_ports
	else
		ports = router.device_ports(address)
	end if
	if not ports or typeof(ports) == "string" then return print("Can't get ports from device.")
	if ports.len == 0 then return print("Scan finished. No active ports.")
	
	info = "\nPORT STATUS SERVICE VERSION LAN"
	for port in ports
		servinfo = router.port_info(port)
		lan_ip = port.get_lan_ip
		status = "open"
		
		if port.is_closed then
			status = "closed"
		end if
		info = info + "\n" + port.port_number + " " + status + " " + servinfo + " " + lan_ip
	end for
	print(format_columns(info) + "\n")
end function

@@@@@@@@@@
@@@@@/home/5n4k3/src/routerpass.src
// routerpass.src - Hack router remotely to retrieve password info.
import_code("/home/5n4k3/src/helper.src")

// Function to get etc directory file
get_passwd = function(result)
	if not result then return null
	
	if typeof(result) == "computer" then
		return result.File("/etc/passwd")
	else if typeof(result) == "file" then
		while result.path != "/"
			result = result.parent
		end while
		
		for folder in result.get_folders
			if folder.name == "etc" then
				result = folder
				break
			end if
		end for
		
		for file in result.get_files
			if file.name == "passwd" then
				return file
			end if
		end for
	end if
	return null
end function

if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: " + get_name() + " [public ip] [local ip]</b>")
if not is_valid_ip(params[0]) or not is_valid_ip(params[1]) then exit(get_name() + ": One or more IP address(es) is/are invalid.")

mx = get_library("metaxploit.so", true)
if not mx then exit
lib = use_exploit(mx, params[0])
if not lib then exit

exploits = get_exploits(lib, true, params[1])
if not exploits then exit(get_name() + ": Can't find vulnerabilities.")

// Will show a log after this runs
for exploit in exploits
	address = exploit["address"]
	print("<color=#00CC00>Address >=====[</color><b>" + address + "</b><color=#00CC00>]=====<</color>")
	for value in exploit["values"]
		if value["result"] == null then continue
		
		print("<color=#CC0000>Value >=====[</color><b>" + value["value"] + ":" + value["access"] + "@" + value["type"] + "</b><color=#CC0000>]=====<</color>")
		
		if value["access"] != "guest" and (value["type"] == "computer" or value["type"] == "file") then
			file = get_passwd(value["result"])
			if not file then exit(get_name() + ": Can't find passwd file.")
			if not file.has_permission("r") then exit(get_name() + ": Permission denied.")
			if file.is_binary then exit(get_name() + ": File was a binary.")
			print(file.path + ":\n" + file.get_content)
			exit("Program ended")
		end if
	end for
end for

@@@@@@@@@@
@@@@@/home/5n4k3/src/autohack.src
// autohack.src - Auto hack and escalate priviledges multitool.
import_code("/home/5n4k3/src/helper.src")
import_code("/home/5n4k3/src/shellhelp.src")
import_code("/home/5n4k3/src/utils.src")
import_code("/home/5n4k3/src/menu.src")

if params.len == 0 then
	print("<b>Usage: " + get_name() + " [-c | -r | -i]</b>\n-c - Local exploit for computer.\n-r - Local exploit for router.\n-i - Interactive mode.")
else if params.len == 1 and params[0] == "-c" then
	do_shell(get_shell)
else if params.len == 1 and params[0] == "-r" then
	do_shell(get_shell, true)
else if params.len == 1 and params[0] == "-i" then
	filenames = ["metaxploit.so", "crypto.so", get_name()]
	options = ["Probe", "Remote Scan", "Launch Remote", "Bank Info", "Mail Info", "Cleanup"]
	exploits = []
	address = null
	port = null
	done = false
	
	while not done
		option = make_menu(options, "white")
		if option == 0 then // Exit
			done = true
		else if option == 1 then // Probe
			if address != null then
				input = user_input("Do you want another address (y/n)? ")
				if input == "y" or input == "Y" then
					address = null
				end if
			end if
			
			while (not address or address == "") and not is_valid_ip(address)
				address = user_input("Enter IP Address: ")
			end while
			
			if not is_valid_ip(address) then continue
			print("Probing " + address + "...")
			probe(address)
		else if option == 2 then // Remote Scan
			// Ask user for new address and port.
			if address != null and port != null then
				input = user_input("Do you want another address and port (y/n)? ")
				if input == "y" or input == "Y" then
					address = null
					port = null
				end if
			end if
			
			// Get address from user.
			while (not address or address == "") and not is_valid_ip(address)
				address = user_input("Remote IP: ")
			end while
			
			// Ask for another port.
			if port != null then
				input = user_input("Do you want another port (y/n)? ")
				if input == "y" or input == "Y" then
					port = null
				end if
			end if
			
			// Get port from user.
			while (not port or port == "") or (port.val < 0 or port.val > 65535)
				port = user_input("Port: ")
			end while
			
			// Get list of exploits.
			if port.val == 0 then
				input = user_input("Enter LAN address: ")
				if input != "" and is_valid_ip(address) then
					exploits = exploit_router(address, input)
				else
					exploits = exploit_router(address)
				end if
			else
				input = user_input("Enter password: ")
				if input != "" or (input.len >= 0 and input.len <= 8) then
					exploits = exploit_server(address, port.val, input)
				else
					exploits = exploit_server(address, port.val)
				end if
			end if
		
			if not exploits then
				print(get_name() + ": Can't find vulnerabilities.")
				continue
			end if
		
			print(make_color("green", "Exploitable addresses found."))
		else if option == 3 then // Launch Remote Hack
			if not exploits or exploits.len == 0 then
				print("Please scan remote host first.")
				continue
			end if
			
			if not address and not port then
				print("Please scan remote host first.")
				continue
			end if
			
			// Loop through exploits to get shell.
			shell = null
			for exploit in exploits
				for value in exploit["values"]
					if not shell and value["type"] == "shell" then
						shell = value["result"]
						break
					end if
				end for
				if shell != null then break
			end for
			if not shell then
				print("Could not get shell.")
				continue
			end if
			
			// Replicate autohack to remote machine.
			replicate(shell, filenames)
			if port.val == 0 then
				shell.launch("/home/guest/" + get_name(), "-r")
			else
				shell.launch("/home/guest/" + get_name(), "-c")
			end if
			done = true
		else if option == 4 then // Bank Info
			if not exploits or exploits.len == 0 then
				print("Please scan remote host first.")
				continue
			end if
			
			if not address and not port then
				print("Please scan remote host first.")
				continue
			end if
			
			// Loop through exploits to get shell.
			result = null
			for exploit in exploits
				for value in exploit["values"]
					if not result and (value["type"] == "computer" or value["type"] == "file") then
						result = value
						break
					end if
				end for
				if result != null then break
			end for
			if not result then
				print("Could not get bank info.")
				continue
			end if

			print("Info snagged: " + result["access"] + "@" + result["type"])
			search_home(result["result"], "Bank.txt")
		else if option == 5 then // Mail Info
			if not exploits or exploits.len == 0 then
				print("Please scan remote host first.")
				continue
			end if
			
			if not address and not port then
				print("Please scan remote host first.")
				continue
			end if
			
			// Loop through exploits to get shell.
			result = null
			for exploit in exploits
				for value in exploit["values"]
					if not result and (value["type"] == "computer" or value["type"] == "file") then
						result = value
						break
					end if
				end for
				if result != null then break
			end for
			if not result then
				print("Could not get bank info.")
				continue
			end if

			print("Info snagged: " + result["access"] + "@" + result["type"])
			search_home(result["result"], "Mail.txt")
		else if option == 6 then // Cleanup
			input = user_input("Are you sure (y/n)? ")
			if input == "y" or input == "Y" then
				print("Cleaning up system...")
				cleanup(get_shell, filenames)
				done = true
			end if
		else
			print("That was an invalid option.")
		end if
	end while
else
	print("Invalid argument given to autohack.")
end if
exit("Program ended")
@@@@@@@@@@
@@@@@/home/5n4k3/src/buildall.src
// buildall.src - Build this and run to compile all sources.
computer = get_shell.host_computer
folder = computer.File(home_dir + "/exploits")
if not folder then
	computer.create_folder(home_dir, "exploits")
end if

folder = computer.File(home_dir + "/virii")
if not folder then
	computer.create_folder(home_dir, "virii")
end if

bin_src = ["decrypt", "wifihack", "zip"]
exploit_src = ["mrrobot", "payload", "routerbank", "routermail", "routerpass", "autohack"]
virii_src = ["viruswipe"]
dirs = ["/bin", home_dir + "/exploits", home_dir + "/virii"]

print("Building all sources...")
for src in bin_src
	source = home_dir + "/src/" + src + ".src"
	print("Building: " + source + " => " + dirs[0])
	get_shell.build(source, dirs[0])
end for

for src in exploit_src
	source = home_dir + "/src/" + src + ".src"
	print("Building: " + source + " => " + dirs[1])
	get_shell.build(source, dirs[1])
end for

for src in virii_src
	source = home_dir + "/src/" + src + ".src"
	print("Building: " + source + " => " + dirs[2])
	get_shell.build(source, dirs[2])
end for

exit("Program ended")
@@@@@@@@@@

