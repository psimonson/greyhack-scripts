// helper.src - Some miscellaneous functions.

// Function to get program name
get_name = function()
	return program_path.split("/")[-1]
end function

// Function to get current working directory
get_path = function()
	return parent_path(program_path)
end function

// Function to print an error message
print_error = function(text)
	if typeof(text) != "string" then exit("<color=#AA0000>print_error: Variable given wasn't a string.</color>")
	return print("<color=#AA0000>" + get_name() + ": " + text + "</color>")
end function

// Function search the home directory
search_home = function(result, user_file)
	home_folder = null
	if typeof(result) == "file" then
		while not result.path == "/"
			result = result.parent
		end while
		
		// Get user home directory
		for folder in result.get_folders
			if folder.name == "home" and folder.is_folder then
				home_folder = folder
				break
			end if
		end for
	else if typeof(result) == "computer" then
		home_folder = result.File("/home")
	else if typeof(result) == "shell" then
		home_folder = result.host_computer.File("/home")
	end if
	if not home_folder then return print("Error: Can't access home dir.")
	
	bank_info = []
	print("Accessing to " + user_file + " files...")
	folders = home_folder.get_folders
	for folder in folders
		file_found = false

		print("User: " + folder.name + " found...")
		for sub_folder in folder.get_folders
			if sub_folder.name == "Config" and sub_folder.is_folder then
				files = sub_folder.get_files
				for file in files
					if file.name == user_file then
						if not file.has_permission("r") then print("failed. Can't access file contents. Permission denied")
						print("success! Storing...")
						bank_info.push(file)
						file_found = true
					end if
				end for
			end if
		end for
		if not file_found then print("File not found.")
	end for
	if folders.len == 0 or bank_info.len == 0 then
		print("No users found. Program aborted")
		return
	end if
	
	// Print results
	print("Printing all saved info...\n========================")
	for bank in bank_info
		print(bank.get_content)
	end for
end function

use_exploit = function(mx = null, address = null, port = null, local = false)
	if not mx then
		print_error("Please call get_library first.")
		return null
	end if

	ns = null
	lib = null
	
	if not local then
		ns = null
		if not port then
			ns = mx.net_use(address)
		else
			ns = mx.net_use(address, port)
		end if
		if not ns then return print_error("Can't connect to net session.")
		lib = ns.dump_lib
	else
		lib = mx.load(address)
	end if
	
	if not lib then
		print_error("Can't get library, not found.")
		return null
	end if
	return lib
end function

get_library = function(library, search)
	lib_dirs = ["/lib", get_path()]
	if search then
		lib = null
		for lib_dir in lib_dirs
			lib = include_lib(lib_dir + "/" + library)
			if lib then break
		end for
		if not lib then
			print_error("Can't find " + library + " anywhere.")
			return null
		end if
		return lib
	else
		return include_lib(library)
	end if
end function

// Function to check for access type
get_accesstype = function(result)
	if not result then return null
	if typeof(result) == "shell" then
		file = result.host_computer.File("/etc/passwd")
		if not file then return "unknown"
		if file.has_permission("r") then
			otherfile = result.host_computer.File("/root")
			if not otherfile then return "unknown"
			if otherfile.has_permission("rwx") then
				return "root"
			else
				return "user"
			end if
		else
			return "guest"
		end if
	else if typeof(result) == "computer" then
		file = result.File("/etc/passwd")
		if not file then return "unknown"
		if file.has_permission("r") then
			otherfile = result.File("/root")
			if not otherfile then return "unknown"
			if otherfile.has_permission("rwx") then
				return "root"
			else
				return "user"
			end if
		else
			return "guest"
		end if
	else if typeof(result) == "file" then
		file = result
		while file.path != "/"
			file = file.parent
		end while
		
		passwd = null
		for folder in file.get_folders
			if folder.name == "etc" then
				for file in folder.get_files
					if file.name == "passwd" then
						if passwd and file.has_permission("r") then
							passwd = file
							break
						end if
					end if
				end for
			end if
		end for
		
		rootdir = null
		for folder in file.get_folders
			if folder.name == "root" then
				if rootdir and folder.has_permission("r") then
					rootdir = folder
					break
				end if
			end if
		end for
		
		// Check for user of file.
		if passwd and passwd.has_permission("r") then
			if rootdir then
				if rootdir.has_permission("rwx") then
					return "root"
				else
					return "user"
				end if
			end if
		else
			return "guest"
		end if
	end if
	return "unknown"
end function

// Function scan for all exploits on remote system
get_exploits = function(lib, use_types = false, extra = null)
	// Build a map of all exploits
	mem_map = []
	print("Scanning for exploits: [<color=#00DD00>" + lib.lib_name + ":" + lib.version + "</color>]\n")
	memory = mx.scan(lib)
	for mem in memory
		map = {}
		list = []
		data = mx.scan_address(lib, mem).split("Unsafe check: ")
		for line in data
			if line == data[0] then continue
			
			value = line[line.indexOf("<b>")+3:line.indexOf("</b>")]
			value = value.replace("\n", "")
			
			if use_types then
				type = null
				if extra then
					type = lib.overflow(mem, value, extra)
				else
					type = lib.overflow(mem, value)
				end if
				if not type then continue
				
				value_map = {}
				value_map["value"] = value
				value_map["type"] = typeof(type)
				value_map["result"] = type
				value_map["access"] = get_accesstype(type)
				list.push(value_map)
			else
				list.push(value)
			end if
		end for
		map["address"] = mem
		map["values"] = list
		mem_map.push(map)
	end for
	if not mem_map then return null
	return mem_map
end function

